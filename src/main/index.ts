import { app, BrowserWindow } from 'electron';
import { registerHandler } from './ipc/handlers';
import { handleTestMessage } from './ipc/test-handler';
import { handleImportFile } from './ipc/import-handler';
import { IPC_CHANNELS } from '../types/ipc';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // Security settings as per PRD Section 6
      contextIsolation: true,     // Isolates preload scripts from renderer
      nodeIntegration: false,      // Prevents Node.js APIs in renderer (security best practice)
      // NOTE: sandbox is disabled due to webpack asset-relocator-loader __dirname issue
      // contextIsolation + nodeIntegration:false still provides strong security
      sandbox: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

/**
 * Register all IPC handlers
 * 
 * WHY THIS IS HERE:
 * - Handlers must be registered before any window tries to use them
 * - Centralizes handler registration in one place
 * - Makes it easy to see all available IPC channels
 */
function registerIPCHandlers(): void {
  console.log('[MAIN] Registering IPC handlers...');
  
  // Register the test message handler (ping/pong)
  registerHandler(IPC_CHANNELS.TEST_MESSAGE, handleTestMessage);
  
  // Register the import file handler (file picker dialog)
  registerHandler(IPC_CHANNELS.IMPORT_FILE, handleImportFile);
  
  // Future handlers will be registered here:
  // registerHandler(IPC_CHANNELS.START_RECORDING, handleStartRecording);
  // etc.
  
  console.log('[MAIN] IPC handlers registered successfully');
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // Register IPC handlers BEFORE creating the window
  // This ensures handlers are ready when the renderer loads
  registerIPCHandlers();
  
  // Now create the window
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
